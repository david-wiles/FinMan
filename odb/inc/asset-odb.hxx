// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef ASSET_ODB_HXX
#define ASSET_ODB_HXX

#include <odb/version.hxx>

#if (ODB_VERSION != 20400UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "model/asset.hxx"

#include "auth_user-odb.hxx"
#include "family-odb.hxx"

#include <memory>
#include <cstddef>
#include <utility>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/no-op-cache-traits.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // asset
  //
  template <>
  struct class_traits< ::asset >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::asset >
  {
    public:
    typedef ::asset object_type;
    typedef ::asset* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef unsigned int id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/sqlite/version.hxx>
#include <odb/sqlite/forward.hxx>
#include <odb/sqlite/binding.hxx>
#include <odb/sqlite/sqlite-types.hxx>
#include <odb/sqlite/query.hxx>

namespace odb
{
  // asset
  //
  template <typename A>
  struct pointer_query_columns< ::asset, id_sqlite, A >
  {
    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // value
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    value_type_;

    static const value_type_ value;

    // name
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    name_type_;

    static const name_type_ name;

    // type
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    type_type_;

    static const type_type_ type;

    // owner
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    owner_type_;

    static const owner_type_ owner;
  };

  template <typename A>
  const typename pointer_query_columns< ::asset, id_sqlite, A >::id_type_
  pointer_query_columns< ::asset, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::asset, id_sqlite, A >::value_type_
  pointer_query_columns< ::asset, id_sqlite, A >::
  value (A::table_name, "\"value\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::asset, id_sqlite, A >::name_type_
  pointer_query_columns< ::asset, id_sqlite, A >::
  name (A::table_name, "\"name\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::asset, id_sqlite, A >::type_type_
  pointer_query_columns< ::asset, id_sqlite, A >::
  type (A::table_name, "\"type\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::asset, id_sqlite, A >::owner_type_
  pointer_query_columns< ::asset, id_sqlite, A >::
  owner (A::table_name, "\"owner\"", 0);

  template <>
  class access::object_traits_impl< ::asset, id_sqlite >:
    public access::object_traits< ::asset >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // _id
      //
      long long _id_value;
      bool _id_null;

      // _value
      //
      double _value_value;
      bool _value_null;

      // _name
      //
      details::buffer _name_value;
      std::size_t _name_size;
      bool _name_null;

      // _type
      //
      details::buffer _type_value;
      std::size_t _type_size;
      bool _type_null;

      // _owner
      //
      details::buffer _owner_value;
      std::size_t _owner_size;
      bool _owner_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    struct owner_tag;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 5UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, const object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::asset, id_common >:
    public access::object_traits_impl< ::asset, id_sqlite >
  {
  };

  // asset
  //
  template <>
  struct alias_traits<
    ::auth_user,
    id_sqlite,
    access::object_traits_impl< ::asset, id_sqlite >::owner_tag>
  {
    static const char table_name[];
  };

  template <>
  struct query_columns_base< ::asset, id_sqlite >
  {
    // owner
    //
    typedef
    odb::alias_traits<
      ::auth_user,
      id_sqlite,
      access::object_traits_impl< ::asset, id_sqlite >::owner_tag>
    owner_alias_;
  };

  template <typename A>
  struct query_columns< ::asset, id_sqlite, A >:
    query_columns_base< ::asset, id_sqlite >
  {
    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // value
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    value_type_;

    static const value_type_ value;

    // name
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    name_type_;

    static const name_type_ name;

    // type
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    type_type_;

    static const type_type_ type;

    // owner
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    owner_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::auth_user,
        id_sqlite,
        owner_alias_ > >
    owner_pointer_type_;

    struct owner_type_: owner_pointer_type_, owner_column_type_
    {
      owner_type_ (const char* t, const char* c, const char* conv)
        : owner_column_type_ (t, c, conv)
      {
      }
    };

    static const owner_type_ owner;
  };

  template <typename A>
  const typename query_columns< ::asset, id_sqlite, A >::id_type_
  query_columns< ::asset, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::asset, id_sqlite, A >::value_type_
  query_columns< ::asset, id_sqlite, A >::
  value (A::table_name, "\"value\"", 0);

  template <typename A>
  const typename query_columns< ::asset, id_sqlite, A >::name_type_
  query_columns< ::asset, id_sqlite, A >::
  name (A::table_name, "\"name\"", 0);

  template <typename A>
  const typename query_columns< ::asset, id_sqlite, A >::type_type_
  query_columns< ::asset, id_sqlite, A >::
  type (A::table_name, "\"type\"", 0);

  template <typename A>
  const typename query_columns< ::asset, id_sqlite, A >::owner_type_
  query_columns< ::asset, id_sqlite, A >::
  owner (A::table_name, "\"owner\"", 0);
}

#include "../i/asset-odb.ixx"

#include <odb/post.hxx>

#endif // ASSET_ODB_HXX
